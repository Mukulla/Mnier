using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Forms;

namespace SMWF
{
    enum En_MineStates
    { 
        Copyed = -2,
        Mine = -1,
        Spacer = 0
    }

    class GameField
    {
        Str_Geminus<int>[] LookAround;

        int[,] ValuesField;

        public List<Str_Geminus<int>> MinesKoords;
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public void Init()
        {
            SetteAround();

            ValuesField = new int[Glo.GSizes.Secundus, Glo.GSizes.Primis];
            MinesKoords = new List<Str_Geminus<int>>();

            PlaceMines();
            FillNumbers();
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void PlaceMines()
        {
            int Mine = -1;
            Str_Geminus<int> Tempo = Func.Set(0,0);
            int i = 0, j = 0;
            var Rnd = new Random();

            int Iterator = 0;
            while (Iterator < Glo.CountMines)
            {
                Tempo.Secundus = Rnd.Next(0, Glo.GSizes.Secundus);
                Tempo.Primis = Rnd.Next(0, Glo.GSizes.Primis);

                if (ValuesField[Tempo.Secundus, Tempo.Primis] != Mine)
                {
                    ValuesField[Tempo.Secundus, Tempo.Primis] = Mine;
                    MinesKoords.Add(Tempo);
                    ++Iterator;
                }
            }
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public void FillNumbers()
        {
            int CountMines001 = 0;

            int Numberer = 0;

            //Индексы элементов
            Str_Geminus<int> Indexes;
            //Копируем
            for (Indexes.Secundus = 0; Indexes.Secundus < Glo.GSizes.Secundus; ++Indexes.Secundus)
            {
                for (Indexes.Primis = 0; Indexes.Primis < Glo.GSizes.Primis; ++Indexes.Primis)
                {
                    if (Get(ref Indexes) == (int)En_MineStates.Mine)
                    {
                        continue;
                    }

                    CountMines001 = CheckMines(ref Indexes, ref ValuesField);
                    if (CountMines001 == 0)
                    {
                        Set(ref Indexes, (int)En_MineStates.Spacer);
                    }
                    else
                    {
                        Numberer += CountMines001;
                        Set(ref Indexes, Numberer);
                        Numberer = 0;
                    }
                }
            }
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        int CheckMines(ref Str_Geminus<int> Indexes001, ref int[,] ValuesField001)
        {
            int CountMines001 = 0;

            Str_Geminus<int> TempoKoords = Func.Set(0, 0);
            Str_Geminus<int> TotalIndexes = Func.Set(0, 0);

            for (int i = 0; i < LookAround.Length; ++i)
            {
                TempoKoords = Indexes001;
                TempoKoords.Secundus += LookAround[i].Secundus;
                TempoKoords.Primis += LookAround[i].Primis;

                Func.CheckClausaAream(ref TempoKoords.Secundus, 0, Glo.GSizes.Secundus - 1);
                Func.CheckClausaAream(ref TempoKoords.Primis, 0, Glo.GSizes.Primis - 1);

                TotalIndexes = TempoKoords;

                if (Get(ref TotalIndexes) == (int)En_MineStates.Mine)
                {
                    ++CountMines001;
                }
            }

            return CountMines001;
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public void Set(ref Str_Geminus<int> SomeInd, int Value)
        {
            ValuesField[SomeInd.Secundus, SomeInd.Primis] = Value;
        }
        public ref int Get(ref Str_Geminus<int> SomeInd)
        {
            return ref ValuesField[SomeInd.Secundus, SomeInd.Primis];
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public void Clear()
        {
            Str_Geminus<int> Indexes;
            for (Indexes.Secundus = 0; Indexes.Secundus < Glo.GSizes.Secundus; ++Indexes.Secundus)
            {
                for (Indexes.Primis = 0; Indexes.Primis < Glo.GSizes.Primis; ++Indexes.Primis)
                {
                    ValuesField[Indexes.Secundus, Indexes.Primis] = 0;
                }
            }
        }
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public ref Str_Geminus<int>[] GetLooAr()
        {
            return ref LookAround;
        }
        

        void SetteAround()
        {
            LookAround = new Str_Geminus<int>[8];

            LookAround[0] = Func.Set( 0, -1);
            LookAround[1] = Func.Set( 1, -1);
            LookAround[2] = Func.Set( 1,  0);
            LookAround[3] = Func.Set( 1,  1);

            LookAround[4] = Func.Set( 0,  1);
            LookAround[5] = Func.Set(-1,  1);
            LookAround[6] = Func.Set(-1,  0);
            LookAround[7] = Func.Set(-1, -1);
        }
    }
}
